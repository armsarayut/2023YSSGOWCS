@page "/6/6_4"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Pdf
@using GoWMS.Server.Reports
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject IStringLocalizer<MasPalletPage> L
@inject MasService ObjService
@inject UserServices OpjUserService
@inject ReportService UserlogService
@inject IPrintingService PrintingService

@attribute [Authorize]

@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary"> @pageheader </MudText>
   @* <MudGrid>
           <MudItem Class="d-flex flex-row">
               <MudNumericField Immediate="false" Label="From" Format="N0" T="int?" @bind-Value="_valuePalletfrom"  />
           </MudItem>
           <MudItem Class="d-flex flex-row">
            <MudNumericField Immediate="false" Label="To" Format="N0" T="int?" @bind-Value="_valuePalletto" />
           </MudItem>
        
          <MudItem Class="d-flex flex-row align-self-end">
            <MudButtonGroup Color="MudBlazor.Color.Default" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" IconColor="MudBlazor.Color.Tertiary" OnClick=@CreateStickPallet>@L["CREATE"]</MudButton>
            </MudButtonGroup>
           </MudItem>
    </MudGrid>*@

    <MudAppBar Color="MudBlazor.Color.Transparent" Fixed="false" Dense="true">

             
        <MudSpacer />
        <MudTooltip Text=@L["Export"] Color="Color.Inherit" Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Custom.FileFormats.FileExcel" Color="MudBlazor.Color.Success" OnClick="DownloadExcelDocument"></MudIconButton>
            <MudIconButton Icon="@Icons.Custom.FileFormats.FilePdf" Color="MudBlazor.Color.Error" OnClick="DownloadPdfDocument"></MudIconButton>
        </MudTooltip>
    </MudAppBar>

    <MudTable Items="@Elements"
              FixedHeader="@fixed_header"
              FixedFooter="@fixed_footer"
              Height="@(fixed_header || fixed_footer ?"500px":"")"
              Dense="@dense" Hover="@hover" Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Mas_Pallet_Go,bool>(FilterFunc)" @bind-SelectedItem="selectedItem"
              SortLabel=@L["SortBy"]>
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString"
                          Placeholder=@L["Search"]
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Mas_Pallet_Go, object>(x=>x.Palletno)">@L["Masterpallet"]</MudTableSortLabel></MudTh>
            @*<MudTh><MudTableSortLabel SortBy="new Func<Mas_Pallet_Go, object>(x=>x.Pallettype)">@L["Type"]</MudTableSortLabel></MudTh>*@
            <MudTh>@L["REPRINT"]</MudTh>
       @*     <MudTh>@L["Masterpallet"]</MudTh>
            <MudTh>@L["Type"]</MudTh>*@
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["Masterpallet"]>@context.Palletno</MudTd>
            @*<MudTd DataLabel=@L["Type"]>@context.Pallettype</MudTd>*@

              <MudTd Class="clm-row-small" DataLabel=@L["REPRINT"]>
                @*<MudFab @onclick="@(()=>TestCreateTag(context.Palletno))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Print" Size="Size.Small" IconSize="Size.Small" />*@
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Print" Color="MudBlazor.Color.Info" @onclick="@(()=>TestCreateTag(context.Palletno))" />

            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {

    public string mPagedesc { get; set; } = "6.4.Pallet";
    private string mPagename { get; set; } = "/6/6_4";

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };

    private readonly string pageheader = "6.4.Pallet";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Mas_Pallet_Go selectedItem = null;
    private HashSet<Mas_Pallet_Go> selectedItems = new HashSet<Mas_Pallet_Go>();
    private IEnumerable<Mas_Pallet_Go> Elements = new List<Mas_Pallet_Go>();

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    public int? _valuePalletfrom = 0;

    public int? _valuePalletto = 0;


    protected override async Task OnInitializedAsync()
    {
        MasService objCS = new MasService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetAllMasterPallets());
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    private void setstr(string str)
    {
        //if (mPalletcode.Length <= 0)
        //{
        //    mPalletcode = str;
        //    msgAction = "Enter Pack ID";
        //    elevation = 3;
        //}
        //else
        //{
        //    if (str == mPalletcode)
        //    {
        //        elevation = 2;
        //        msgAction = "Mapping successfully";
        //        ObjCustomService.UpdateReceivingOrderbypallet(mPalletcode);
        //        mPalletcode = "";
        //    }
        //    else
        //    {
        //        mPackid = str;
        //        ObjCustomService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
        //    }
        //}

        //CustomerService objGR = new CustomerService();
        //Elements = objGR.GetReceivingOrdersbypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            setstr(palletcode);
            palletcode = "";
        }
    }

    private bool FilterFunc(Mas_Pallet_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Palletno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task DownloadExcelDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                MasPalletPageRptExcel excelReport = new MasPalletPageRptExcel();
                List<Mas_Pallet_Go> listExcelReport = new List<Mas_Pallet_Go>();
                listExcelReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.xlsx";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(excelReport.Report(listExcelReport)));
                this.InsertAuditrial("Export excel file :" + fileName.ToString(), pageheader);
            }

        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task DownloadPdfDocument()
    {
        try
        {
            bool? result = await CheckRoleReport();
            if (result == true)
            {
                MasPalletPageRptPdf pdfReport = new MasPalletPageRptPdf();
                List<Mas_Pallet_Go> listPdfReport = new List<Mas_Pallet_Go>();
                listPdfReport = Elements.ToList();
                var fileName = $"{pageheader.ToString()}-{DateTime.Now.ToString("yyyyMMddHHmmssfff")}.pdf";
                await JSRuntime.InvokeAsync<object>("jsSaveAsFile", fileName, Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport)));
                this.InsertAuditrial("Export pdf file :" + fileName.ToString(), pageheader);
            }


        }
        catch (Exception e)
        {
            var exmsg = e.Message.ToString();
        }
    }

    public async Task TestCreateTag(string palletno)
    {

        ////var guid = Guid.NewGuid().ToString();


        //DataTable dtTrans = new DataTable("ptyGenWmsTransGGC");
        //dtTrans.Columns.Add("tyitem", typeof(System.String));
        //dtTrans.Columns.Add("tyqty", typeof(System.Decimal));
        //dtTrans.Columns.Add("tylot", typeof(System.String));
        //dtTrans.Columns.Add("tyexpdate", typeof(System.DateTime));
        //dtTrans.Columns.Add("typallet", typeof(System.String));

        //DataRow _ravi = dtTrans.NewRow();
        //_ravi["tyitem"] = "AAA";
        //_ravi["tyqty"] = 10.9;
        //_ravi["tylot"] = "LOT0001";
        //_ravi["tyexpdate"] = DateTime.Now;
        //_ravi["typallet"] = "1";
        //dtTrans.Rows.Add(_ravi);


        //ObjInboundService.CreateTagno(apiid, 1, 5, "A0001", sUsername, dtTrans, guid.ToString());

        ////TagList = ObjInboundService.GetTagGGCByIndex(apiid);

        //TagList = await Task.Run(() => ObjInboundService.GetTagGGCByIndex(apiid));

        KimballPallet4x1_5 pdfReport = new KimballPallet4x1_5();
        List<Pallet4x1_5> listPdfReport = new List<Pallet4x1_5>();

        var pallets = new List<Pallet4x1_5>() {
                new Pallet4x1_5(){Palletcode = palletno},
                 new Pallet4x1_5(){Palletcode = palletno}
            };


        listPdfReport = pallets.ToList();

        await PrintingService.Print(new PrintOptions(Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport))) { Base64 = true });


    }

    public async Task CreateStickPallet()
    {
        string palletno ;

        int iStart = 0;
        int iEnd =0;

        if (_valuePalletto != null && _valuePalletfrom != null)
        {
            if (_valuePalletto.Value !=0 &&  _valuePalletfrom.Value !=0)
            {
                if (_valuePalletto < _valuePalletfrom)
                {
                    iStart = _valuePalletto.Value;
                    iEnd = _valuePalletfrom.Value;
                }
                else
                {
                    iStart = _valuePalletfrom.Value;
                    iEnd = _valuePalletto.Value;
                }

                KimballPallet4x1_5 pdfReport = new KimballPallet4x1_5();
                List<Pallet4x1_5> listPdfReport = new List<Pallet4x1_5>();


                List<Pallet4x1_5> objs = new List<Pallet4x1_5>();

                for (int i = iStart; i <= iEnd; i++)
                {
                    palletno = "PL" + String.Format("{0:D8}", i);
                    objs.Add(new Pallet4x1_5() { Palletcode = palletno });
                    objs.Add(new Pallet4x1_5() { Palletcode = palletno });
                }


                listPdfReport = objs.ToList();

                await PrintingService.Print(new PrintOptions(Convert.ToBase64String(pdfReport.ExportPDF(listPdfReport))) { Base64 = true });
                this.InsertAuditrial("Print Pallet Tag from " + iStart.ToString() + " to " + iEnd .ToString(), pageheader);

            }
            
        }
        else{

        }
       

    }


    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion

}
