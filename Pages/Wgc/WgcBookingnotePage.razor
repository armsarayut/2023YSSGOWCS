@page "/3/3_1"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Inv
@using GoWMS.Server.Models.Oub
@using System.Text.Json
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject InvService ObjService
@inject PublicFunServices ObjFunService


@inject WgcService ObjErpService
@inject ISnackbar Snackbar
@inject ErpApiService ObjApiService
@inject UserServices OpjUserService
@inject ReportService UserlogService
@inject StoreoutService ObjOubService
@inject InboundService OpjInbService
@inject IStringLocalizer<WgcBookingnotePage> L
@attribute [Authorize]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>


@if (Elements == null)
{
    // <p><em>Loading...</em></p>
    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    @if (StkGroup)
    {
        <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">@pageheader</MudText>

        <MudAppBar Color="MudBlazor.Color.Transparent" Fixed="false" Dense="true">
@*            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Done"
               Color="Color.Success"
               OnClick=@OnButtonOrderSelected>@L["START"]</MudButton>*@

             <MudButtonGroup Color="MudBlazor.Color.Default" Variant="Variant.Outlined">
                <MudButton StartIcon="@Icons.Material.Filled.AddTask" IconColor="MudBlazor.Color.Tertiary" OnClick=@OnButtonOrderSelected>@L["START"]</MudButton>
                @*<MudButton StartIcon="@Icons.Material.Filled.CreateNewFolder" IconColor="MudBlazor.Color.Tertiary" OnClick=@AddNewGr>@L["ADD"]</MudButton>*@
             </MudButtonGroup>

            <MudSpacer />
        </MudAppBar>


        <MudTable Hover="@hover"
          Breakpoint="Breakpoint.Sm"
          Height="@(fixed_header || fixed_footer ?"500px":"")"
          MultiSelection=@_multiSelect
          FixedHeader="@fixed_header"
          Items="@Elements.OrderBy(o => o.Itembar)"
          Dense="@dense"
          FixedFooter="@fixed_footer"
          Bordered="@bordered"
          Striped="@striped"
          Filter="new Func<Inv_Stock_GoApiInfo,bool>(FilterFunc)" @bind-SelectedItems="selectedItems">

            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString"
                      Placeholder=@L["Search"]
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>@L["STATUS"]</MudTh>
              <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.Apicreated)">@L["DNDate"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.Apikaror)">@L["SoNo"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.ApimaterialCode)">@L["ItemCode"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.Itemname)">@L["ItemName"]</MudTableSortLabel></MudTh>

               @* <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.ApipackageID)">@L["Seq"]</MudTableSortLabel></MudTh>*@
                <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.ApijobCode)">@L["BatchNo"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Inv_Stock_GoApiInfo, object>(x=>x.DisApigrQuantity)">@L["Qty"]</MudTableSortLabel></MudTh>
                <MudTh>@L["ACTION"]</MudTh>

            </HeaderContent>

            <RowTemplate>
                    @if(context.Quantity>0)
                    {
                       <MudTd DataLabel="@L["STATUS"]">
                            <MudIcon Icon="@Icons.Material.Filled.EmojiEmotions" Color="MudBlazor.Color.Success" />
                       </MudTd>
                    }
                    else
                    {
                         <MudTd DataLabel="@L["STATUS"]">
                        <MudIcon Icon="@Icons.Material.Filled.MoodBad" Color="MudBlazor.Color.Error" />
                        </MudTd>
                    }
                    <MudTd DataLabel="@L["DNDate"]">@Convert.ToDateTime(context.Apicreated).ToString(VarGlobals.FormatDT)</MudTd>
                    <MudTd DataLabel="@L["SoNo"]">@context.Apikaror</MudTd>
                    <MudTd DataLabel="@L["ItemCode"]">@context.ApimaterialCode</MudTd>
                <MudTd DataLabel="@L["ItemName"]">@context.Itemname</MudTd>
                    @*<MudTd DataLabel=@L["Seq"]>@context.ApipackageID</MudTd>*@
                    <MudTd DataLabel="@L["BatchNo"]">@context.ApijobCode</MudTd>
                <MudTd DataLabel="@L["Qty"]" Style="text-align: right">@string.Format(VarGlobals.FormatN2, context.DisApigrQuantity)</MudTd>
                     <MudTd DataLabel="@L["ACTION"]">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="MudBlazor.Color.Warning" @onclick="@(()=>CancelGR((long)context.Apiefidx, context.Apikaror,context.ApipackageID))" />
                    </MudTd>
           
                
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
            </PagerContent>

        </MudTable>
    }
    else
    {

    }

    <MudMessageBox @ref="mbox" Title="@mboxheader" CancelText="Cancel">
        <MessageContent>
            @foreach (var item in References)
            {
                <br />
                @item
            }
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Success" StartIcon="@Icons.Material.Filled.DataSaverOn">Confirm!</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {

    MudMessageBox mbox { get; set; }

    private bool _dense = false;
    private bool _multiSelect = true;
    public string mPagedesc { get; set; } = "3.1.Order Booking";
    private string mPagename { get; set; } = "/3/3_1";

    private string pageheader { get; set; } = "3.1.Order Booking";
    private string msgAction = "Enter Palletcode";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    private string palletcode { get; set; }
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixed_header = true;
    private bool fixed_footer = true;
    private string searchString = "";
    private Inv_Stock_GoApiInfo selectedItem = null;
    private HashSet<Inv_Stock_GoApiInfo> selectedItems = new HashSet<Inv_Stock_GoApiInfo>();
    private IEnumerable<Inv_Stock_GoApiInfo> Elements = new List<Inv_Stock_GoApiInfo>();

    string state = "Message box hasn't been opened yet";

    string mboxheader { get; set; } = "รายการที่ขอเบิก";
    string mboxcontent { get; set; } = "";
    string mboxmessage { get; set; } = "";

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    public bool StkGroup { get; set; }

    protected List<string> References { get; set; } = new List<string>();

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";
    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StoreoutService objCS = new StoreoutService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));
        ////////////////////////////////////////
        ///
        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);
        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));

        Elements = await Task.Run(() => objCS.GetStockListApiInfo());

        this.OnSelectChange();
    }


    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }

    protected void OnSelectChange()
    {
        StkGroup = !StkGroup;

    }

    private TableGroupDefinition<Inv_Stock_GoApiInfo> _groupDefinition = new TableGroupDefinition<Inv_Stock_GoApiInfo>()
        {
            GroupName = "PalletNo",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Itembar
        };

    private bool FilterFunc(Inv_Stock_GoApiInfo element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Itemcode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallteno.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Pallettag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Itemname} {element.Storagebin}".Contains(searchString))
            return true;
        return false;
    }

    private bool FilterFunc_(InvStockSum element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Item_code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Item_name} ".Contains(searchString))
            return true;
        return false;
    }

    async Task SelectOrder()
    {
        var result = selectedItems.Where(w => w.Quantity != null).GroupBy(t => t.Itemcode)
                   .Select(t => new
                   {
                       Itemcode = t.Key,
                       Qty = t.Sum(ta => ta.Quantity),
                   }).ToList();

        System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
        Int16 i = 0;

        foreach (var rec in result)
        {
            i++;
            strPopup.Append(i.ToString() + ". รายการ : ");
            strPopup.Append(rec.Itemcode.ToString());
            strPopup.Append(" จำนวน : ");
            strPopup.AppendLine(rec.Qty.ToString());
        }

        System.Text.StringBuilder popup = new System.Text.StringBuilder();
        popup.AppendLine("รายการที่ขอเบิก");
        popup.Append(strPopup.ToString());

        string sContentText = popup.ToString();

        var parameters = new DialogParameters();
        parameters.Add("ContentText", sContentText);
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", MudBlazor.Color.Success);

        var formModal = DialogService.Show<DialogTemplateExample_Dialog>("Confirm", parameters);

        var resultModal = await Task.Run(() => formModal.Result);

        var formModal1 = await Task.Run(() => DialogService.ShowMessageBox("AA", "XX"));

    }

    private async void OnButtonOrderSelected()
    {
        bool? result = await CheckRoleAdd();
        if (result == true)
        {
            if (selectedItems.Where(w => w.Quantity == null).Count() > 0)
            {
                Snackbar.Add("The selected item is not yet in stock.", Severity.Warning);
            }else{
                 if (selectedItems.Where(w => w.Quantity != null).Count() > 0)
                {
                    var resultlist = selectedItems.Where(w => w.Quantity != null).GroupBy(t => t.Itemcode)
                        .Select(t => new
                        {
                            Itemcode = t.Key,
                            Qty = t.Sum(ta => ta.Quantity),
                        }).ToList();

                    System.Text.StringBuilder strPopup = new System.Text.StringBuilder();
                    Int16 i = 0;
                    mboxcontent = "";

                    References.Clear();

                    if (resultlist.Count > 0)
                    {
                        foreach (var rec in resultlist)
                        {
                            i++;
                            strPopup.Clear();
                            strPopup.Append(i.ToString() + ". รายการ : ");
                            strPopup.Append(rec.Itemcode.ToString());
                            strPopup.Append(" จำนวน : ");
                            strPopup.AppendLine(rec.Qty.ToString());

                            References.Add(strPopup.ToString());
                        }
                        result = await mbox.Show();
                        state = result == null ? "Cancelled" : "Confirmed";

                        if (state == "Confirmed")
                        {
                            this.InsertAuditrial("Set Picking List : " + strPopup.ToString(), pageheader);
                            //await SelectOrderPick();
                            await Task.Run(() => SelectOrderPick());

                        }

                        Elements = await Task.Run(() => ObjOubService.GetStockListApiInfo());
                        //selectedItems.Clear();
                        searchString = null;

                        this.StateHasChanged();
                    }
                }else{
                    Snackbar.Add("Please select item!", Severity.Warning);
                }

                
                }

            

           
        }

    }

    private async void SelectOrderPick()
    {
        var serializeOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true
            };

        string cus = "WMS";
        //string so = "MO-" + DateTime.Now.ToString("yyMMddHHmmssffff");


        string lot = "-";
        string batch = "-";

        DateTime requestdate = DateTime.Today.Date;

        if (selectedItems.Count > 0)
        {
            var pallets = selectedItems.Where(w => w.Quantity != null).GroupBy(g => g.Pallteno).OrderBy(o => o.Key).Select(s => s.Key);

            foreach (var valpal in pallets)
            {
                
                var so = selectedItems.Where(w => w.Pallteno == valpal && w.Quantity != null).Select(c => c.Apikaror).First();


                //string so = "MO-" + ObjFunService.GetRunning("sq002", 4);

                var strRES = selectedItems.Where(w => w.Pallteno == valpal && w.Quantity != null).OrderBy(x => x.Pallettag).Select(x => new { efidx = x.Efidx, quantity = x.Quantity, packageid = x.Pallettag, materialcode = x.Itemcode, palletno = x.Pallteno, sono = so, customer = cus, lotno = x.Docno, batchno = x.Docnote, matematerialdescription = x.Itemname, unit = x.Unit, deliverydate = requestdate }).ToList();


                var jsonRES = JsonSerializer.Serialize(strRES, serializeOptions);

                var iReturn = 0;
                var sReturn = "Call";

                ObjApiService.SetPickWgcmanual(jsonRES, ref iReturn, ref sReturn);

                if (iReturn == 0)
                {
                    Snackbar.Add(sReturn, Severity.Error);
                }
                else
                {
                    this.InsertAuditrial("Create order picking : " + so.ToString(), pageheader);

                    Snackbar.Add("Order picking created", Severity.Success);
                }
            }

            await RefreshData();
        }
        else
        {
            Snackbar.Add("Please select order picking", Severity.Warning);
        }
    }

    private async Task RefreshData()
    {
        Elements = await ObjOubService.GetStockListApiInfo();
        selectedItems = null;
    }

        private async Task AddNewGr()
    {
        bool? result = await CheckRoleAdd();
        if (result == true)
        {
            long pid = 0;
            DialogOptions closeOnEscapeKey = new DialogOptions() { CloseButton = true };
            DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
            var parameters = new DialogParameters();
            parameters.Add("pOrder", "");
            parameters.Add("pItemcode", "");
            parameters.Add("pSuno", "");
            parameters.Add("pBatchno", "");


            var dialog = DialogService.Show<AddNewGR>("NEW JOB", parameters, maxWidth);

            var resultDialog = await dialog.Result;

            if (!resultDialog.Cancelled)
            {
                Elements = await Task.Run(() => ObjOubService.GetStockListApiInfo());
                this.StateHasChanged();
            }

        }

    }

    private async Task CancelGR(long idDel, string sjob, string ssuno)
    {
        bool? result = await CheckRoleDelete();
        if (result == true)
        {
             string state = "";

            state = await ConfirmDelete();

            if (state=="Deleted")
            {
                if (OpjInbService.CancelGrAPI(idDel))
                {
                    this.InsertAuditrial("Cancel Order Bookin >> JOB:" + sjob + " SU:" + ssuno, pageheader);
                }
                else
                {
                    this.InsertAuditrial("Error Cancel Order Bookin >> JOB:" + sjob + " SU:" + ssuno, pageheader);
                }

                Elements = await Task.Run(() => ObjOubService.GetStockListApiInfo());

            }

        }
    }



      private async Task<string>  ConfirmDelete()
    {
        string state = "";

        bool? result = await DialogService.ShowMessageBox(
            "Warning", 
            "Deleting can not be undone!", 
            yesText:"Delete!", cancelText:"Cancel");

        state= result==null ? "Cancelled" : "Deleted";
   
        return  state ;

    }


    #region "Role"
    private async Task<bool> CheckRoleAdd()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_add == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleAddPermit, yesText: "OK");
            }

        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleEdit()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_edit == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleEditPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }

    private async Task<bool> CheckRoleDelete()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_del == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleDelPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }


        return bRet;
    }

    private async Task<bool> CheckRoleApprove()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_apv == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleApprovePermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }
        return bRet;
    }

    private async Task<bool> CheckRoleReport()
    {
        bool bRet = false;

        if (Roles.ToList().Count > 0)
        {
            var iCorrect = Roles.ToList().FindIndex(a => a.Role_rpt == true);

            if (iCorrect >= 0)
            {
                bRet = true;
            }
            else
            {
                bRet = false;
            }

            if (bRet == false)
            {
                bool? result = await DialogService.ShowMessageBox(
                        "Warning", VarGlobals.MessageRoleReportPermit, yesText: "OK");
            }
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                                "Warning", VarGlobals.MessageRoleAuthrizedPermit, yesText: "OK");
        }

        return bRet;
    }
    #endregion




            }
