@page "/1/1_5"
@using GoWMS.Server.Data
@using GoWMS.Server.Controllers
@using GoWMS.Server.Models
@using GoWMS.Server.Models.Api
@using GoWMS.Server.Models.Mas
@using GoWMS.Server.Models.Wgc
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ErpService ObjErpService
@inject ErpApiService ObjErpApiService
@inject MasService ObjMasService
@inject WgcService ObjWgcService
@inject UserServices OpjUserService
@inject ReportService UserlogService
@inject IJSRuntime js
@inject IStringLocalizer<IbpPalletMap> L
@attribute [Authorize]

<MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">@pageheader</MudText>

<MudGrid>
    <MudItem xs="12">
        @if (@elevation == 0) //Defult
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 1) //Info
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 2) //Success
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 3) // Warning
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
        else if (@elevation == 4) // Error
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@msgAction</MudAlert>
        }
    </MudItem>

    <MudItem xs="12">
        <div class="form-group">
            <input Id="inputBar"  style="width: 100%; height: 40px" type="text" class="form-control" @bind-value="@stringput" @onkeyup="@KeyUp" placeholder="Input scan" />
        </div>
    </MudItem>

</MudGrid>

<br />

@if (Elements == null)
{
    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{

    <MudTable Items="@Elements"
              Dense="@dense"
              Hover="@hover"
              Bordered="@bordered"
              Striped="@striped"
              Filter="new Func<Api_Receivingorders_Go,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@L["MasterPallet"] : [ @mPalletcode ]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>@L["Job"]</MudTh>
            <MudTh>@L["ItemCode"]</MudTh>
            <MudTh>@L["SeqNo"]</MudTh>
            <MudTh>@L["Batch"]</MudTh>
            <MudTh>@L["Qty"]</MudTh>
            <MudTh>@L["Action"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=@L["Job"]>@context.Document_Number</MudTd>
            <MudTd DataLabel=@L["ItemCode"]>@context.Material_Code</MudTd>
            <MudTd DataLabel=@L["SeqNo"]>@context.Package_Id</MudTd>
            <MudTd DataLabel=@L["Batch"]>@context.Job_Code</MudTd>
            <MudTd DataLabel=@L["Qty"]>@context.DisGr_Quantity</MudTd>
            <MudTd DataLabel=@L["Action"]>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" Color="MudBlazor.Color.Warning" @onclick="@(()=>DeleteMap(@context.Package_Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
}

@code {
    public string mPagedesc { get; set; } = "1.2.Pallet Mapping";
    private string mPagename { get; set; } = "/1/1_5";

    private string pageheader = "1.2.Pallet Mapping";
    private string msgAction = "Enter MasterPallet";
    private string mPalletcode { get; set; } = "";
    private string mPackid { get; set; } = "";
    public string stringput { get; set; } = "";
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString = "";
    private Api_Receivingorders_Go selectedItem = null;
    private HashSet<Api_Receivingorders_Go> selectedItems = new HashSet<Api_Receivingorders_Go>();
    private IEnumerable<Api_Receivingorders_Go> Elements = new List<Api_Receivingorders_Go>();

    private IEnumerable<Api_Receivingorders_Go> MapPalletItem = new List<Api_Receivingorders_Go>();

    private IEnumerable<Mas_Pallet_Go> MasterPallets = new List<Mas_Pallet_Go>();

    List<Userroleinfo> Roles = new List<Userroleinfo>();
    [Inject] private IDialogService DialogService { get; set; }

    public int elevation = 0;
    private ResultReturn resultReturn = null;

    public string StringKeyPressed = "AAA";

    string KeyPressed = "";
    string EventInfo = "";

    string sUsername { get; set; } = "";
    string sRole { get; set; } = "";
    string sGroupID { get; set; } = "";
    string sUserID { get; set; } = "";

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            //KeyPressed = "";
            //EventInfo = "";
            StringKeyPressed = "";
            KeyPressed = "Key Pressed is " + args.Key;
            EventInfo = "Event Type " + args.Type;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ErpApiService objCS = new ErpApiService();

        //////// Intial Menu and Privilege//////
        resultReturn = await Task.Run(() => OpjUserService.InsertMenu(mPagename, mPagedesc));
        resultReturn = await Task.Run(() => OpjUserService.InsertPrivilege(mPagename));

        await GetUserAthu();
        this.InsertAuditrial("View", pageheader);

        Roles = await Task.Run(() => OpjUserService.GetUserRole(mPagename, long.Parse(sGroupID)));


        Elements = await Task.Run(() => objCS.GetAllApiRecevingorderGosypallet(mPalletcode));
        //MasterPallets = ObjMasService.GetAllMasterPallets();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus the element
            await Focus("inputBar");
        }
    }

    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("jsfunction.focusElement", elementId);
    }

    async Task GetUserAthu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        sGroupID = user.Claims.FirstOrDefault(
        c => c.Type == ClaimTypes.Role)?.Value;

        sUserID = user.Claims.FirstOrDefault(
            c => c.Type == ClaimTypes.Actor)?.Value;
    }

    private void InsertAuditrial(String actdesc, String munname)
    {
        bool bRet = UserlogService.InsertAudittrial(actdesc, munname, long.Parse(sUserID));
    }



    private  async Task setstr(string str)
    {
        if (mPalletcode.Length <= 0)
        {
            //var allCorrect = MasterPallets.Where(a => a.Palletno == str).ToList();

            //if (allCorrect.ToList().Count > 0)
            //{


            bool bValidate;

            bValidate= ObjMasService.ValidateMasterpallet(str);
            if (bValidate)
            {
                mPalletcode = str;
                msgAction = "Enter Pallet for complete";
                elevation = 1;
            }
            else
            {
                mPalletcode = "";
                elevation = 4;
                msgAction = "PalletGo find not found";
            }


            //MapPalletItem = null;
            //MapPalletItem = ObjWgcService.GetMapPalletApiNewDelivery_note(mPalletcode);
            //if (MapPalletItem.ToList().Count > 0)
            //{
            //    Task<string> retString;

            //    retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode);

            //    //ObjErpApiService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
            //    msgAction = "Enter PalletGo for complete";
            //    elevation = 1;
            //}
            //else
            //{
            //    mPalletcode = "";
            //    msgAction = "Enter PalletGo";
            //    elevation = 1;
            //}




            //}
            //else
            //{
            //    mPalletcode = "";
            //    elevation = 4;
            //    msgAction = "PalletGo find not found";
            //}
        }
        else
        {
            if (str == mPalletcode)
            {
                if (Elements.ToList().Count > 0)
                {
                    elevation = 2;
                    msgAction = "Mapping successfully";
                    //ObjErpApiService.UpdateReceivingOrderbypallet(mPalletcode);
                    ObjErpApiService.SetMappedPallet(mPalletcode);
                    //ObjWgcService.UpdatePalletNewDelivery_note(mPalletcode);
                    mPalletcode = "";
                }
                else
                {
                    elevation = 3;
                    msgAction = "Please enter PalletGo";
                }
            }
            else
            {



                mPackid = str;
                MapPalletItem = null;
                MapPalletItem = ObjErpService.GetErpMatReceivingOrdersByTag(mPackid);
                if (MapPalletItem.ToList().Count > 0)
                {
                    Int64 Checkin = await ObjErpApiService.GetHaveReceivingOrdersBypack(mPalletcode, mPackid);
                
                    if(Checkin <=0 )
                    {
                         Task<string> retString;

                        retString = ObjErpApiService.InsertReceivingOrderbypackAsync(MapPalletItem.ToList(), mPalletcode);

                        //ObjErpApiService.UpdateReceivingOrderbypack(mPalletcode, mPackid);
                        msgAction = "Enter PalletGo for complete";
                        elevation = 1;
                    }
                    else{
                       
                         elevation = 4;
                            msgAction = "SU : " + mPackid + " have used";
                              mPackid = "";
                    }

                   
                }
                else
                {
                    mPackid = "";
                    elevation = 4;
                    msgAction = "SU : " + mPackid + " find not found";
                }
            }
        }
        ErpApiService objGR = new ErpApiService();
        Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);
    }

    private string stxtInput { get; set; }

    private void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")        // fire on enter
        {
            //Console.WriteLine("Done the thing: " + MyValue);
            //stxtInput = MyValue
            string pallettemp = stringput;

            setstr(pallettemp);

            //Reset();
        }
    }

    void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {

            string pallettemp = stringput;

            setstr(pallettemp);
            Reset();
        }
    }

    private bool FilterFunc(Api_Receivingorders_Go element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Package_Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Material_Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Material_Description} {element.Job_Code} {element.Document_Number}".Contains(searchString))
            return true;
        return false;
    }

    private async Task DeleteMap(string pack)
    {
        string state = "";

        state = await ConfirmDelete();

        if (state == "Deleted")
        {
            msgAction = "Cancle successfully";
            ObjErpApiService.CancelReceivingOrderbypack(mPalletcode, pack);
        }


        ErpApiService objGR = new ErpApiService();
        Elements = objGR.GetAllApiRecevingorderGosypallet(mPalletcode);

    }

    private void Reset()
    {
        this.stringput = string.Empty;
        StateHasChanged();
    }

    private async Task<string> ConfirmDelete()
    {
        string state = "";

        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        state = result == null ? "Cancelled" : "Deleted";

        return state;

    }

}
